name: Terraform Pull Request
on:
  - pull_request

# Set environment variables used for all jobs
env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_VERSION: 1.0.3
  tf_actions_working_dir: .

jobs:
  test_checks:
    name: Tests and checks
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      tfsec: ${{ steps.tfsec.outputs }}
      infracost_past: ${{ steps.infracost.outcome.past_total_monthly_cost }}
      infracost_current: ${{ steps.infracost.outcome.total_monthly_cost }}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Security and cost checks
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run infracost diff
        id: infracost
        uses: infracost/infracost-gh-action@master
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: /scripts/ci/diff.sh # Do not change
          path: .
          usage_file: infracost-usage.yml
  terraform:
    name: Terraform

    runs-on: ubuntu-latest

    outputs:
      plan_output: ${{ steps.plan.outputs.stdout }}
      plan_outcom: ${{ steps.plan.outcome }}
      fmt: ${{ steps.fmt.outcome }}
      init: ${{ steps.init.outcome }}
      validate: ${{ steps.validate.outputs.stdout }}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Setup Terraform and run fmt, init and validation
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

  github:
    name: Update Pull Request
    needs: [test_checks, terraform]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@master
        env:
          PLAN: "terraform\n ${{ needs.terraform.outputs.plan_output }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Security Scan: âœ…
            #### Cost changed from ${{ needs.test_checks.outputs.infracost_past }} to ${{ needs.test_checks.outputs.infracost_current }}
            #### Terraform Format: âœ… \`${{ needs.terraform.outputs.fmt }}\`
            #### Terraform Initialization: âœ… \`${{ needs.terraform.outputs.init }}\`
            #### Terraform Validation: âœ… ${{ needs.terraform.outputs.validate }}
            #### Terraform Plan: ðŸ“– \`${{ needs.terraform.outputs.plan_outcom }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Edit by: @${{ github.actor }}, Working Directory: \`${{ env.tf_actions_working_dir }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: github.terraform.steps.plan.outcome == 'failure'
        run: exit 1