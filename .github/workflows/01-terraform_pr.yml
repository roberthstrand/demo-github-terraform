name: Terraform Pull Request
on:
  - pull_request

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: Production

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Security and cost checks
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run infracost diff
        id: infracost
        uses: infracost/infracost-gh-action@master
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: /scripts/ci/diff.sh # Do not change
          path: .
          usage_file: infracost-usage.yml

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true
        env:
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@master
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Security Scan: âœ…
            #### Cost changed from ${{ steps.infracost.outcome.past_total_monthly_cost }} to ${{ steps.infracost.outcome.total_monthly_cost }}
            #### Terraform Format: âœ… \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization: âœ… \`${{ steps.init.outcome }}\`
            #### Terraform Validation: âœ… ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan: ðŸ“– \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1